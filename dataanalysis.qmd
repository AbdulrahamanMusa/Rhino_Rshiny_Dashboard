```{R}
library(readr)
library(dplyr)
library(DT)
library(echarts4r)
library(sjPlot)
library(gridExtra)
```



```{R}
# Read in the data
df <- read_csv("world-data-2023.csv")
```

```{R}      
# dipslay the df in a table using datatable
datatable(df)
glimpse(df)

```


```{R}
df%>%
select(Country,`Density
(P/Km2)`,Abbreviation, `Agricultural Land( %)`, `Land Area(Km2)`, `Armed Forces size`,`Birth Rate`,`Calling Code`,`Capital/Major City`, `Co2-Emissions`, CPI, `CPI Change (%)`, `Currency-Code`, `Fertility Rate`, `Forested Area (%)`, `Gasoline Price`, GDP, `Gross primary education enrollment (%)`,`Gross tertiary education enrollment (%)`, `Infant mortality`, `Largest city`, `Life expectancy`, `Maternal mortality ratio`, `Minimum wage`,`Official language`, `Out of pocket health expenditure`, `Physicians per thousand`, Population, `Population: Labor force participation (%)`, `Tax revenue (%)`, `Total tax rate`, `Unemployment rate`, Urban_population, Latitude, Longitude)

```

```{R}
# Country Health Indices 
# Create a valuebox from this dataset df <- read_csv("world-data-2023.csv") that will show the values at a glance to show global incidence of (Birth Rate, `Fertility Rate`, `Infant mortality`Maternal mortality ratio) to show the global mortality and when individual selectInput country of interest to show that country only 
#
# create a vertvetimtext to displayed country detail Health Indices 
#  displayed top ten countries with high mortality barchart


df%>%
select(Country,`Birth Rate`, `Co2-Emissions`, `Fertility Rate`, GDP, `Infant mortality`, `Life expectancy`, `Maternal mortality ratio`, `Out of pocket health expenditure`, `Physicians per thousand`, Population, Urban_population, Latitude, Longitude)

```


```{R}

birth_rate <- df %>% 
  arrange(desc(`Birth Rate`)) %>% 
  head(10) %>% 
  select(Country, `Birth Rate`) %>%
  mutate(`Birth Rate` = as.numeric(`Birth Rate`)) %>%
  mutate(Country = fct_reorder(Country, `Birth Rate`)) %>%
  echarts4r::e_charts(Country) %>%
  echarts4r::e_bar(`Birth Rate`) %>%
  echarts4r::e_flip_coords() %>%
  echarts4r::e_tooltip(trigger = "axis") %>%
  echarts4r::e_y_axis(name = "Birth Rate") %>%
  echarts4r::e_x_axis(name = "Country", axisLabel = list(interval = 0)) %>%
  echarts4r::e_title("Top 10 Countries with Highest Birth Rate") %>%
  e_color("#04155ef1") %>%
  #echarts4r::e_theme("#04155ef1") %>%
  echarts4r::e_legend(TRUE) %>%
  echarts4r::e_grid(left = "15%", right = "4%", bottom = "4%", contain_label = TRUE) %>%
  echarts4r::e_visual_map(
    `Birth Rate`,
    min = 0,
    max = 50,
    text = c("High", "Low"),
    calculable = TRUE,
    orient = "horizontal",
    left = "center",
    bottom = "15%"
  ) %>%   
  e_toolbox_feature(feature = "dataView") %>%
    e_toolbox_feature(feature = "saveAsImage") %>%
    e_toolbox_feature(feature = "restore") %>%
    e_toolbox_feature(feature = "dataZoom") %>%
    e_toolbox_feature(feature = "dataView") %>%
    e_theme("yellow")

birth_rate

```

```{R}
fertility_rate <- df %>% 
    arrange(desc(`Fertility Rate`)) %>% 
    .[1:10, ] %>% 
    select(Country, `Fertility Rate`) %>%
    mutate(`Fertility Rate` = as.numeric(`Fertility Rate`)) %>%
    echarts4r::e_charts(Country) %>%
    echarts4r::e_bar(`Fertility Rate`) %>%
    echarts4r::e_flip_coords() %>%
    echarts4r::e_tooltip(trigger = "axis") %>%
    echarts4r::e_y_axis(name = "Fertility Rate") %>%
    echarts4r::e_x_axis(name = "Country", axisLabel = list(interval = 0)) %>%
    echarts4r::e_title("Top 10 Countries with Highest Fertility Rate") %>%
    e_color("#04155ef1") %>%
    echarts4r::e_legend(TRUE) %>%
    echarts4r::e_grid(left = "15%", right = "4%", bottom = "4%", contain_label = TRUE) %>%
    echarts4r::e_visual_map(
      `Fertility Rate`,
      min = 0,
      max = 50,
      text = c("High", "Low"),
      calculable = TRUE,
      orient = "horizontal",
      left = "center",
      bottom = "15%"
    ) %>%   
    e_toolbox_feature(feature = "dataView") %>%
    e_toolbox_feature(feature = "saveAsImage") %>%
    e_toolbox_feature(feature = "restore") %>%
    e_toolbox_feature(feature = "dataZoom") %>%
    e_toolbox_feature(feature = "dataView") %>%
    e_theme("yellow")

fertility_rate

```





```{R}
df%>%
select(Country,`Birth Rate`, `Co2-Emissions`, `Fertility Rate`, GDP, `Infant mortality`, `Life expectancy`, `Maternal mortality ratio`, `Out of pocket health expenditure`, `Physicians per thousand`, Population, Urban_population, Latitude, Longitude) %>% sjplot_pal()

```


```{r, message=FALSE, warning=FALSE}
plot_xtab(x = df$`Infant mortality`, 
          grp = df$`Co2-Emissions`,
          margin = "row",
          bar.pos = "stack",
          show.summary = T,
          coord.flip = T)
```


```{R}
  group_by(df$`Co2-Emissions`) %>%
  .[1:10,] %>% 
  plot_frq(df$Country) %>% 
  plot_grid()
```

```{R}
df <- na.omit(df)
m1 <- lm(`Maternal mortality ratio` ~ GDP +`Minimum wage` + `Out of pocket health expenditure` + `Tax revenue (%)` + `Co2-Emissions`, data = df)

m2 <- lm(`Infant mortality` ~ GDP +`Minimum wage` + `Out of pocket health expenditure` + `Tax revenue (%)` + `Co2-Emissions`, data = df)
```



```{R}
tab_model(m1)
```

```{R}
create_co2_emission_plot <- function(df) {
  # Select Abbreviation and Co2-Emissions columns
  df_selected <- df %>%
    select(Country, `Co2-Emissions`)

  # Select top 10 countries with highest Co2-Emissions
  top_countries <- df_selected %>%
    arrange(desc(`Co2-Emissions`)) %>%
    slice_head(n = 10) %>%
    pull(Country)

  # Filter original data to include only top 10 countries
  df_top_countries <- df_selected %>%
    filter(Country %in% top_countries)

  # Plot data using echarts4r
  plot <- df_top_countries %>%
    e_charts(Country) %>%
    e_line(`Co2-Emissions`) %>%
    e_title("Top 10 Countries with highest Co2-Emissions in the world")
  
  return(plot)
}

create_co2_emission_plot(df)
```





```{R}
# Load necessary libraries
library(dplyr)
library(gt)

# Select columns
df_selected <- df %>%
  select(Country, `Agricultural Land( %)`, `Land Area(Km2)`, `Armed Forces size`,  CPI, `CPI Change (%)`, `Forested Area (%)`, `Gasoline Price`, GDP, `Gross primary education enrollment (%)`, `Gross tertiary education enrollment (%)`) %>%
  slice_head(n = 10) # Select top 10 countries

# Create gt table
df_selected %>%
  gt() %>%
  data_color(
    columns = c(`Agricultural Land( %)`, `Land Area(Km2)`, `Armed Forces size`, CPI, `CPI Change (%)`, `Forested Area (%)`, `Gasoline Price`, GDP, `Gross primary education enrollment (%)`, `Gross tertiary education enrollment (%)`),
  )
```



```{R}

# Load necessary libraries
library(dplyr)
library(gt)

# Select columns
df_selected2 <- df %>%
  select(Country, `Largest city`, `Life expectancy`, `Minimum wage`, `Physicians per thousand`, Population, `Population: Labor force participation (%)`, `Tax revenue (%)`, `Total tax rate`, `Unemployment rate`, Urban_population) %>%
  slice_head(n = 10) # Select top 10 countries

# Create gt table
df_selected2 %>%
  gt() %>%
  data_color(
    columns = c(`Life expectancy`, `Minimum wage`, `Physicians per thousand`, Population, `Population: Labor force participation (%)`, `Tax revenue (%)`, `Total tax rate`, `Unemployment rate`, Urban_population),
  )
```

```{R}
library(randomForest)
# Load necessary library
library(randomForest)

# Assuming df is your DataFrame and it includes your features and target variables
features <- df[,c(`Out of pocket health expenditure`, 'Minimum wage', 'Population', 'Physicians per thousand', 'Tax revenue (%)', 'Total tax rate', 'Gasoline Price', 'GDP')]
targets <- df[,c('Birth Rate', 'Fertility Rate', 'Infant mortality', 'Maternal mortality ratio')]

# Handle missing values in features and targets
features[] <- lapply(features, function(feature) {
  ifelse(is.na(feature), mean(feature, na.rm = TRUE), feature)
})

targets[] <- lapply(targets, function(target) {
  ifelse(is.na(target), mean(target, na.rm = TRUE), target)
})

# Combine features and targets into a single data frame
data <- cbind(features, targets)

# Fit the model for each target variable
models <- lapply(names(targets), function(target_name) {
  # Split the data into training and testing sets
  set.seed(42)
  train_indices <- sample(1:nrow(data), nrow(data)*0.8)
  train_data <- data[train_indices, ]
  
  # Fit the model
  model <- randomForest(as.formula(paste("`", target_name, "` ~ .", sep = "")), data = train_data, ntree = 100, na.action = na.omit)
  
  return(model)
})

```


